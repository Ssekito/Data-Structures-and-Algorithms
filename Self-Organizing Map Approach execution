import numpy as np

# Define estimated city coordinates based on the graph
cities = np.array([
    [0, 0],   # City 1 (Start)
    [2, 5],   # City 2
    [1, 3],   # City 3
    [4, 5],   # City 4
    [3, 2],   # City 5
    [5, 0],   # City 6
    [1, 1]    # City 7
])

num_cities = len(cities)
num_neurons = num_cities * 2  # More neurons than cities
neurons = np.random.rand(num_neurons, 2) * 5  # Initialize neurons randomly in space

# SOM Parameters
num_iterations = 1000
learning_rate = 0.8
neighborhood_radius = num_neurons // 4

# Gaussian Neighborhood Function
def neighborhood_function(winner, iteration):
    sigma = max(neighborhood_radius * (1 - iteration / num_iterations), 1)
    return np.exp(-((np.arange(num_neurons) - winner) ** 2) / (2 * sigma ** 2))

# Train SOM
for iteration in range(num_iterations):
    city = cities[np.random.randint(num_cities)]  # Pick a random city
    distances = np.linalg.norm(neurons - city, axis=1)  # Find closest neuron
    winner = np.argmin(distances)

    # Adjust neuron positions
    influence = neighborhood_function(winner, iteration)[:, np.newaxis]
    neurons += learning_rate * influence * (city - neurons)
    learning_rate *= 0.995  # Decay learning rate

# Map neurons to cities
mapped_cities = []
for city in cities:
    winner = np.argmin(np.linalg.norm(neurons - city, axis=1))
    mapped_cities.append((winner, city))

# Sort the mapped cities by neuron index to create the route
mapped_cities.sort()
tsp_route = [city for _, city in mapped_cities]

# Calculate total route distance
total_distance = sum(np.linalg.norm(tsp_route[i] - tsp_route[i+1]) for i in range(len(tsp_route)-1))
total_distance += np.linalg.norm(tsp_route[-1] - tsp_route[0])  # Return to start

# Output results
tsp_route, total_distance
